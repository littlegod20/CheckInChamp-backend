# Deploy Node.js application to EC2 instance
name: Deploy Slack bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/node-app:latest

    # Deploy to EC2
    #troublesome
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create docker-compose.yml if not exists
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          services:
            app:
              image: ${{ secrets.DOCKER_USERNAME }}/node-app:latest
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - PORT=3000
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
            
            redis:
              image: redis:7-alpine
              ports:
                - "6380:6379"
              volumes:
                - redis-data:/data
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s

          networks:
            app-network:
              driver: bridge

          volumes:
            redis-data:
          EOL
          
          # Pull the latest images
          sudo docker-compose pull
          
          # Stop and remove existing containers
          sudo docker-compose down
          
          # Start new containers
          sudo docker-compose up -d
          
          # Check container status
          sudo docker-compose ps
